<tool id='NA' name='NA'>
  <command interpreter='bash'>main.sh</command>
  <cancel interpreter='bash'>kill.sh</cancel>
  <inputs>
    <section name='pwrl_host' type='section' title='Jupyter Server Host' expanded='true'>
      <param 
        name='resource' 
        type='computeResource' 
        label='Service host' 
        hideUserWorkspace='true' 
        help='Resource to host the service'
        hideDisconnectedResources='true'
      ></param>
      <param 
        name='nports' 
        label='Number of Ports to Reserve' 
        type='hidden' 
        value='1'  
      ></param> 
      <param 
        name='jobschedulertype' 
        type='select' 
        label='Select Controller or SLURM Partition' 
        help='Job will submitted using SSH or sbatch, respectively'      
        multiple='false'>
          <option value="CONTROLLER" selected="true">Controller</option>
          <option value="SLURM">SLURM Partition</option>
      </param>   
      <param 
        name='_sch__dd_account_e__tag_slurmshv2' 
        label='SLURM account' 
        type='dynamicAccountDropdown' 
        help='Account to submit the interactive job' 
        resource='pwrl_host.resource'
        show_if='{"pwrl_host.jobschedulertype":"SLURM","pwrl_host.resource.provider":["slurmshv2","existing"]}'
      ></param>
      <param 
        name='_sch__dd_partition_e__tag_slurmshv2' 
        label='SLURM partition' 
        type='dynamicPartitionDropdown' 
        resource='pwrl_host.resource'
        account='pwrl_host._sch__dd_account_e__tag_slurmshv2'
        help='Partition to submit the interactive job.' 
        show_if='{"pwrl_host.jobschedulertype":"SLURM","pwrl_host.resource.provider":["slurmshv2","existing"]}'
        dependent='true'
      ></param>
      <param name='qos_tag_slurmshv2'
        label='Quality of Service [QoS]'
        type="dynamicQOSDropdown"
        help="Select a QOS from the drop down menu."
        resource="pwrl_host.resource"
        account="pwrl_host._sch__dd_account_e__tag_slurmshv2"
        partition="pwrl_host._sch__dd_partition_e__tag_slurmshv2"
        dependent="true"
        show_if='{"pwrl_host.jobschedulertype":"SLURM","pwrl_host.resource.provider":["slurmshv2","existing"]}'
      ></param>
      <param 
        name='_sch__dd_ntasks_e__tag_slurmshv2' 
        label='Number of tasks' 
        type='integer' 
        min="1" 
        max="100" 
        help='--ntasks=value slurm directive' 
        value='1'
        show_if='{"pwrl_host.jobschedulertype":"SLURM","pwrl_host.resource.provider":["slurmshv2","existing"]}'
      ></param>
      <param 
        name='_sch__dd_nodes_e__tag_slurmshv2' 
        label='Number of nodes' 
        type='hidden' 
        help='Required' 
        value='1'
        show_if='{"pwrl_host.jobschedulertype":"SLURM","pwrl_host.resource.provider":["slurmshv2","existing"]}'
      ></param>
      <param 
        name='_sch__dd_partition_e__tag_cloud' 
        label='SLURM partition' 
        type='dynamicPartitionDropdown' 
        resource='pwrl_host.resource'
        help='Partition to submit the interactive job. Leave empty to let SLURM pick the optimal option.' 
        show_if='{"pwrl_host.jobschedulertype":"SLURM","pwrl_host.resource.provider":["gclusterv2", "pclusterv2", "azclusterv2", "aws-slurm", "google-slurm", "azure-slurm"]}'
        optional='true'
        dependent='false'
      ></param>
      <param 
        name='_sch__dd_time_e_' 
        label='Walltime' 
        type='text' 
        help='e.g. 01:00:00 - Amount of time slurm will honor the interactive session.' 
        value='01:00:00'
        depends_on='pwrl_host.jobschedulertype'
        show_if='SLURM'
      ></param>
      <param 
        name='scheduler_directives' 
        label='Scheduler directives' 
        type='text' 
        help='e.g. --mem=1000;--gpus-per-node=1 - Use the semicolon character ; to separate parameters. Do not include the SBATCH keyword.'
        depends_on='pwrl_host.jobschedulertype'
        show_if='SLURM'
        optional='true'
      ></param>
    </section>
    <section name='service' type='section' title='Jupyter Notebook Settings' expanded='true'>
      <param 
        name='name' 
        label='Service' 
        type='hidden' 
        value='jupyter-host'
      ></param>
      <param 
        name="conda_install" 
        type="boolean" 
        truevalue="Yes" 
        falsevalue="No" 
        checked="True" 
        value="true"
        label="Install jupyter-notebook if not there?" 
        help='Select Yes to install Jupyter Notebook and No to load an existing python environment '
      ></param>
      <param 
        name='install_instructions_tag_slurmshv2' 
        label='Install Instructions' 
        type='hidden' 
        value='install_command'
        show_if='{"service.conda_install":"true", "pwrl_host.resource.provider":["slurmshv2","existing"]}'  
      ></param>
      <param 
        name='install_command_tag_slurmshv2' 
        label='Command to Install Jupyter' 
        type='text' 
        value='module load intelpython; pip install notebook==6.5.7 --no-warn-script-location' 
        help=''
        show_if='{"service.conda_install":"true", "pwrl_host.resource.provider":["slurmshv2","existing"]}'  
      ></param>
      <param 
        name='load_env_tag_slurmshv2' 
        label='Command to load Jupyter' 
        type='text' 
        value='module load intelpython; export PATH=$PATH:/home/${USER}/.local/bin' 
        help='To load the environment, enter the appropriate command, for example: module load module-name or source path/to/env.sh.'
        show_if='{"pwrl_host.resource.provider":["slurmshv2","existing"]}'
      ></param>

      <param 
        name='conda_sh_tag_cloud' 
        label='Path to conda environment' 
        type='text' 
        value='__WORKDIR__/pw/.miniconda/etc/profile.d/conda.sh' 
        help='Path to use in source /path/to/conda.sh'
        show_if='{"service.conda_install":"true","pwrl_host.resource.provider":["gclusterv2", "pclusterv2", "azclusterv2", "aws-slurm", "google-slurm", "azure-slurm"]}'
      ></param>
      <param 
        name='conda_env_tag_cloud' 
        label='Conda environment (recommended: base)' 
        type='text' 
        value='base' 
        help='Environment to active. The base environment enables changing kernel to other environments!'
        show_if='{"service.conda_install":"true","pwrl_host.resource.provider":["gclusterv2", "pclusterv2", "azclusterv2", "aws-slurm", "google-slurm", "azure-slurm"]}'
      ></param>
      <param 
        name='load_env_tag_cloud' 
        label='Command to load Jupyter' 
        type='text' 
        value='source __WORKDIR__/pw/.miniconda/etc/profile.d/conda.sh; conda activate base' 
        help='To load the environment, enter the appropriate command, for example: module load module-name or source path/to/env.sh.'
        show_if='{"pwrl_host.resource.provider":["gclusterv2", "pclusterv2", "azclusterv2", "aws-slurm", "google-slurm", "azure-slurm"]}'
      ></param>
      <param 
        name='install_instructions_tag_cloud' 
        type='select' 
        label='Select Jupyter Notebook Installation' 
        show_if='{"service.conda_install":"true","pwrl_host.resource.provider":["gclusterv2", "pclusterv2", "azclusterv2", "aws-slurm", "google-slurm", "azure-slurm"]}'
        multiple='false'
        value='notebook7.0.8-python3.12.1'
        options = "[
          {'label': 'Latest default versions of Jupyter Notebook and Python (not thoroughly tested)', 'value': 'latest'}, 
          {'label': 'Jupyter Notebook 7.0.8 with Python version 3.12.1', 'value': 'notebook7.0.8-python3.12.1'}, 
          {'label': 'Jupyter Notebook 6.5.4 with Python version 3.9.18', 'value': 'notebook6.5.4-python3.9.18'}, 
          {'label': 'Provide custom Conda environment YAML file', 'value': 'yaml'}
        ]">
      </param>
      <param
        name='yaml_tag_cloud' 
        label='Paste Conda Environment Defition YAML' 
        type='textarea' 
        help='Copy and paste a custom Conda environment definition YAML file'
        show_if='{"service.install_instructions_tag_cloud":"yaml","pwrl_host.resource.provider":["gclusterv2", "pclusterv2", "azclusterv2", "aws-slurm", "google-slurm", "azure-slurm"]}'
      ></param>
      <param name='install_kernels_tag_cloud' 
        show_if='{"service.conda_install":"true","pwrl_host.resource.provider":["gclusterv2", "pclusterv2", "azclusterv2", "aws-slurm", "google-slurm", "azure-slurm"]}'
        type='select' 
        optional='true'
        label='Select additional kernels to install' 
        multiple='true'>
          <option value="julia-kernel">Julia Kernel</option>
          <option value="R-kernel">R Kernel</option>
      </param>
      <param 
        name='password' 
        label='Password for notebook session' 
        type='hidden' 
        value='' 
        help='Enter password or leave blank for no password'
      ></param>
      <param 
        name='notebook_dir' 
        label='Directory to start JupyterHub GUI' 
        type='text' 
        value='__WORKDIR__' 
        help='This is the directory that you start with when the JupyterHub graphical user interface starts.'
      ></param>
   </section>
  </inputs>
  <outputs>
  </outputs>
</tool>
