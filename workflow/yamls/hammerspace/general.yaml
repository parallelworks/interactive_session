permissions:
  - '*'
sessions:
  session:
    useTLS: false
    redirect: true

app:
  target: inputs.pwrl_host.resource

jobs:
  preprocessing:
    steps:
      - name: Validating Target Resource
        early-cancel: any-job-failed
        run: ./utils/steps-v3/preprocessing/input_form_resource_wrapper.sh ${{ inputs.pwrl_host.resource.ip }}
      - name: Process Inputs
        early-cancel: any-job-failed
        run: |
          set -e
          echo "export basepath=/me/session/${PW_USER}/${{ sessions.session }}"  >> resources/host/inputs.sh
          ./utils/steps-v3/preprocessing/process_inputs_sh.sh
      - name: Transfer Files to Controller
        early-cancel: any-job-failed
        run: ./utils/steps-v3/preprocessing/transfer_files_to_controller.sh
      - name: Controller Preprocessing
        early-cancel: any-job-failed
        run: ./utils/steps-v3/preprocessing/controller_preprocessing.sh
      - name: Initialize Cancel Script
        early-cancel: any-job-failed
        run: ./utils/steps-v3/preprocessing/initialize_cancel_script.sh

  controller_job:
    needs:
      - preprocessing
    steps:
      - name: Create Controller Session Script
        early-cancel: any-job-failed
        if: ${{ 'CONTROLLER' == inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/controller/create_session_script.sh
      - name: Launch and Monitor Controller Job
        if: ${{ 'CONTROLLER' == inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/controller/launch_and_monitor_job.sh
        cleanup: |
          if [[ "${{ inputs.pwrl_host.jobschedulertype }}" == "CONTROLLER" ]]; then
            ./kill.sh
          fi
      - name: Clean and Exit
        early-cancel: any-job-failed
        if: ${{ 'CONTROLLER' == inputs.pwrl_host.jobschedulertype }}
        run: ./utils/steps-v3/clean_and_exit.sh

  create_session:
    needs:
      - preprocessing
    steps:
      - name: Set Session Name
        early-cancel: any-job-failed
        run: |
          session_name=$(pwd | rev | cut -d'/' -f1-2 | tr '/' '-' | rev)
          echo "session_name=${session_name}" | tee -a $OUTPUTS
      - name: Get Controller Hostname
        early-cancel: any-job-failed
        if: ${{ 'CONTROLLER' == inputs.pwrl_host.jobschedulertype }}
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ inputs.pwrl_host.resource.ip }}
        run: |
          target_hostname=$(${sshcmd} hostname)
          echo "target_hostname=${target_hostname}"  | tee -a $OUTPUTS
      - name: Get Remote Port
        early-cancel: any-job-failed
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ inputs.pwrl_host.resource.ip }}
        run: |
          source resources/host/inputs.sh
          while true; do
            echo "Waiting for service port file..."

            # Check if the service.port file exists and read its contents
            remote_port=$(${sshcmd} "bash -c \"if [ -f ${resource_jobdir}/service.port ]; then cat ${resource_jobdir}/service.port; fi\"")

            # Exit the loop if remote_port is successfully set (file was found and read)
            if [ -n "$remote_port" ]; then
              echo "Service port found: $remote_port"
              break
            fi

            # Wait before the next check
            sleep 5
          done
          echo "remote_port=${remote_port}"  | tee -a $OUTPUTS
      - name: Waiting for Server to Start
        early-cancel: any-job-failed
        env:
          sshcmd: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ inputs.pwrl_host.resource.ip }}
          remote_port: ${{ needs.create_session.outputs.remote_port }}
          remote_host: ${{ needs.create_session.outputs.target_hostname }}
        run: |
          TIMEOUT=5
          RETRY_INTERVAL=3

          # Function to check if server is listening
          check_server() {
              ${sshcmd} "curl --silent --connect-timeout \"$TIMEOUT\" \"http://${remote_host}:${remote_port}\"" >/dev/null 2>&1
              return $?
          }

          # Main loop
          attempt=1
          while true; do
              echo "Attempt $attempt: Checking if server is listening on ${remote_host}:${remote_port}..."
              
              if check_server; then
                  echo "Success: Server is listening on ${remote_host}:${remote_port}!"
                  exit 0
              else
                  echo "Server not responding. Retrying in ${RETRY_INTERVAL} seconds..."
                  sleep "$RETRY_INTERVAL"
                  ((attempt++))
              fi
          done
      - name: Select Local Port
        early-cancel: any-job-failed
        run: |
          local_port=$(pw agent open-port)
          echo "local_port=${local_port}"  | tee -a $OUTPUTS
      - name: Set URL SLUG
        early-cancel: any-job-failed
        run: |
          source resources/host/inputs.sh
          echo "slug=#/auth/login"  | tee -a $OUTPUTS
      - name: Expose Port
        early-cancel: any-job-failed
        uses: parallelworks/update-session
        with:
          remotePort: '${{ needs.create_session.outputs.remote_port }}'
          localPort: '${{ needs.create_session.outputs.local_port }}'
          remoteHost: ${{ inputs.service.host }}
          slug: '${{ needs.create_session.outputs.slug }}'
          target: ${{ inputs.pwrl_host.resource.id }}
          name: ${{ sessions.session }}

'on':
  execute:
    inputs:
      pwrl_host:
        type: group
        label: Resource Target
        items:
          resource:
            type: compute-clusters
            label: Select Target
            include-workspace: false
            tooltip: Resource to host the service
          nports:
            type: number
            label: Number of Ports to Reserve
            hidden: true
            default: 1
            optional: true
          jobschedulertype:
            type: dropdown
            label: Select Controller, SLURM Partition or PBS Queue
            hidden: true
            default: CONTROLLER
            options:
              - value: CONTROLLER
                label: Controller
              - value: SLURM
                label: SLURM Partition
              - value: PBS
                label: PBS Queue
            tooltip: Job will be submitted using SSH, sbatch or qsub, respectively
        collapsed: false
      service:
        type: group
        label: Hammespace Settings
        items:
          name:
            type: string
            hidden: true
            default: hammerspace
          port:
            label: Port
            type: number
            default: 8443
          host:
            label: Server Host
            type: string
